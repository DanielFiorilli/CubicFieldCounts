
\\ This is the linux bash script used for the computations in the paper https://arxiv.org/abs/2102.08077 . It calls Belabas's CUBIC software (see https://www.math.u-bordeaux.fr/~kbelabas/research/cubic.html ) to produce values of the function  N^+(X), which counts the number of cubic fields of (positive) discriminant at most X.
\\ The paramters which can be changed are as follows: 
\\ lim is the maximal value of X.
\\ pas is the distance between every two points of the function which will be computed. 
\\ The script will run 4 processes at the time, maximizing the use of quad-processor computers (4 can be changed to any desired number).
\\ Before running this script, one should edit the source code in Belabas' program in order to only output the values of N(X) in stdout (rather than in stderr).
\\ To compute negative discriminant rather than positive ones, one should replace [$var+1,$(($var + pas))] with [-$var+1,-$(($var + pas))].


lim=$((10**(11)))
pas=$(($lim/5000))
rm results1
rm results2
rm results3
rm results0


for (( var = 0;var<lim; var+=$pas ))
do 	
	 flag=$(($(($var/$pas))%4))
	 ./cubic-noprint  [$var+1,$(($var + pas))] >> results$flag &
	 if  [  $flag -eq  0 ]; then
	 	wait -f
	 fi
done 






\\Finally, once this is done, one can execute the following code in GNU Octave (or MATLAB) to plot the graph of (N^+(X) - C_1 X - C_2X^{5/6})/X^{1/2} .


lim=10^11;
load results0
load results1
load results2
load results3

resultsss=[results0;results1;results2;results3];


resultss=resultsss;
[resultss(:,1),I] = sort(resultsss(:,1));
resultss(:,2)=resultsss(I,2);

c1=0.069325614381725622390260523235127561201;
c2=-0.14768526103033486047641021039737967452;


L=length(resultsss);


norm=zeros(1,L);
results=zeros(1,L);
results(1)=resultss(1,2);
for j = 2:L
	results(j)=resultss(j,2)+results(j-1);
endfor

X=resultss(:,1)';
for j = 1:L
	norm(j)=(results(j)-c1*X(j)-c2*(X(j))^(5/6) )*((X(j))^(-.5));
endfor

plot(X,norm)
title ("The normalized error term associated to N(X)");
xticks([0:lim/10:lim]);
xticklabels({ 0,lim/10,2*lim/10,3*lim/10,4*lim/10,5*lim/10,6*lim/10,7*lim/10,8*lim/10,9*lim/10,lim})






